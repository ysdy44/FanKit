
```Csharp

using FanKit.Win2Ds;
using Microsoft.Graphics.Canvas;
using Microsoft.Graphics.Canvas.Effects;
using Microsoft.Graphics.Canvas.UI.Xaml;
using System;
using System.Numerics;
using System.Threading.Tasks;
using Windows.UI.Xaml.Controls;
using static FanKit.Win2Ds.HomographyController;

namespace FanKit.Frames.Win2Ds
{
    public sealed partial class HomographyControllerPage : Page
    {
        public readonly Matrix3x2 Matrix = Matrix3x2.CreateTranslation(Vector2.Zero);
        public readonly Matrix3x2 InverseMatrix = Matrix3x2.CreateTranslation(Vector2.Zero);

        HomographyController.Layer Layer;
        HomographyController.Controller Controller = new HomographyController.Controller();

        bool IsMove;

        public HomographyControllerPage()
        {
            this.InitializeComponent();

            //Csanvas
            this.CanvasControl.CreateResources += (sender, args) => args.TrackAsyncAction(this.CreateResourcesAsync(sender).AsAsyncAction());
            this.CanvasControl.Draw += (sender, args) => 
            {
                args.DrawingSession.DrawImage(new Transform2DEffect
                {
                    TransformMatrix = this.Layer.Transformer.Matrix,
                    Source = this.Layer.Image
                });
                Transformer.DrawBoundNodes(args.DrawingSession, this.Layer.Transformer, this.Matrix);
            };
             

            //Pointer
            this.CanvasControl.PointerPressed += (sender, e) =>
            {
                this.IsMove = true;

                Vector2 point = e.GetCurrentPoint(this.CanvasControl).Position.ToVector2();
                this.Controller.Start(point, this.Layer, this.Matrix, this.InverseMatrix);
                this.CanvasControl.Invalidate();
            };
            this.CanvasControl.PointerMoved += (sender, e) =>
            {
                if (this.IsMove)
                {
                    Vector2 point = e.GetCurrentPoint(this.CanvasControl).Position.ToVector2();
                    this.Controller.Delta(point, this.Layer, this.Matrix, this.InverseMatrix);
                    this.CanvasControl.Invalidate();
                }
            };
            this.CanvasControl.PointerReleased += (sender, e) =>
            {
                if (this.IsMove)
                {
                    this.IsMove = false;

                    Vector2 point = e.GetCurrentPoint(this.CanvasControl).Position.ToVector2();
                    this.Controller.Complete(point, this.Layer, this.Matrix, this.InverseMatrix);
                    this.CanvasControl.Invalidate();
                }
            };
        }

        private HomographyController.Transformer GetTransformer(double controlWidth, double controlHeight, uint bitmapWidth, uint bitmapHeight)
        {
            float scale = Math.Min((float)controlWidth / bitmapWidth, (float)controlHeight / bitmapHeight)/2;
            Vector2 postion = new Vector2((float)controlWidth - scale * bitmapWidth, (float)controlHeight - scale * bitmapHeight) /2;
            return Transformer.CreateFromSize(bitmapWidth, bitmapHeight, postion, scale);
        }        

        private async Task CreateResourcesAsync(CanvasControl sender)
        {
            CanvasBitmap bitmap = await CanvasBitmap.LoadAsync(sender, "Icon/Avatar.jpg");
            this.Layer = new Layer
            {
                Transformer = this.GetTransformer(this.CanvasControl.ActualWidth, this.CanvasControl.ActualHeight, bitmap.SizeInPixels.Width, bitmap.SizeInPixels.Height),
                Image = bitmap,
            };
        }
        
    }
}




```