```Csharp


using FanKit.Transformers;
using Microsoft.Graphics.Canvas;
using Microsoft.Graphics.Canvas.Effects;
using Microsoft.Graphics.Canvas.UI.Xaml;
using System;
using System.Numerics;
using System.Threading.Tasks;
using Windows.UI.Xaml.Controls;

namespace FanKit.Frames.Transformers
{
    /// <summary>
    /// Page of <see cref="FanKit.Transformers.Transformer">.
    /// </summary>
    public sealed partial class TransformerPage : Page
    {
        TransformerMode mode;
        Transformer startingTransformer;
        Vector2 startingPoint;
        Layer layer;

        class Layer
        {
            public CanvasBitmap Image;
            public TransformerMatrix TransformerMatrix;
        }
        

        //@Construct
        public TransformerPage()
        {
            this.InitializeComponent();

            this.ResetButton.Tapped += (s, e) =>
            {
                Transformer transformer = this.Reset(this.layer.Image.SizeInPixels.Width, this.layer.Image.SizeInPixels.Height, (float)this.CanvasControl.ActualWidth, (float)this.CanvasControl.ActualHeight);
                this.layer.TransformerMatrix.Destination = transformer;

                this.CanvasControl.Invalidate();//Invalidate
            };


            //Canvas
            this.CanvasControl.CreateResources += (sender, args) => args.TrackAsyncAction(this.CreateResourcesAsync(sender).AsAsyncAction());
            this.CanvasControl.Draw += (sender, args) =>
            {
                //Transformer
                ICanvasImage source = this.layer.Image;
                Matrix3x2 transformMatrix = this.layer.TransformerMatrix.GetMatrix();
                Transformer transformer = this.layer.TransformerMatrix.Destination;

                //Draw
                args.DrawingSession.DrawImage(new Transform2DEffect
                {
                    Source = source,
                    TransformMatrix = transformMatrix
                });
                args.DrawingSession.DrawBoundNodes(transformer);
            };


            //Single
            this.CanvasOperator.Single_Start += (point) =>
            {
                this.startingPoint = point;

                //Controller
                this.layer.TransformerMatrix.CacheTransform();
                Transformer transformer = this.layer.TransformerMatrix.Destination;
                this.startingTransformer = transformer;
                this.mode = Transformer.ContainsNodeMode(point, transformer);

                this.CanvasControl.Invalidate();//Invalidate
            };
            this.CanvasOperator.Single_Delta += (point) =>
            {
                bool isRatio = false;
                bool isCenter = false;
                bool isStepFrequency = false;

                //Controller
                Transformer transformer = Transformer.Controller(this.mode, startingPoint, point, this.startingTransformer, isRatio, isCenter, isStepFrequency);
                this.layer.TransformerMatrix.Destination = transformer;

                this.CanvasControl.Invalidate();//Invalidate
            };
            this.CanvasOperator.Single_Complete += (point) =>
            {
                this.CanvasControl.Invalidate();//Invalidate
            };
        }

        private async Task CreateResourcesAsync(CanvasControl sender)
        {
            //Bitmap
            CanvasBitmap bitmap = await CanvasBitmap.LoadAsync(sender, "Icon/Avatar.jpg");
            TransformerMatrix transformerMatrix = new TransformerMatrix
            {
                Source = new Transformer(bitmap.SizeInPixels.Width, bitmap.SizeInPixels.Height, Vector2.Zero),
                Destination = this.Reset(bitmap.SizeInPixels.Width, bitmap.SizeInPixels.Height, (float)sender.ActualWidth, (float)sender.ActualHeight),
            };

            //Layer
            this.layer = new Layer
            {
                TransformerMatrix = transformerMatrix,
                Image = bitmap,
            };
        }

        private Transformer Reset(float bitmapWidth, float bitmapHeight, float controlWidth, float controlHeight)
        {
            Vector2 center = new Vector2(controlWidth, controlHeight) / 2.0f;
            float scale = System.Math.Min(controlWidth / bitmapWidth, controlHeight / bitmapHeight);
            float width = scale * bitmapWidth / 3.0f / 2.0f;
            float height = scale * bitmapHeight / 3.0f / 2.0f;

            Transformer destination = new Transformer
            {
                LeftTop = center + new Vector2(-width, -height),
                RightTop = center + new Vector2(+width, -height),
                RightBottom = center + new Vector2(+width, +height),
                LeftBottom = center + new Vector2(-width, +height),
            };
            return destination;
        }

    }
}


```