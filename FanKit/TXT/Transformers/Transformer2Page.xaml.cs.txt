   Source Code:

  [Transformer2Page.xaml.cs](Transformer2Page.xaml.cs)


```Csharp


using FanKit.Transformers;
using Microsoft.Graphics.Canvas;
using Microsoft.Graphics.Canvas.Effects;
using Microsoft.Graphics.Canvas.UI.Xaml;
using System;
using System.Numerics;
using System.Threading.Tasks;
using Windows.Foundation;
using Windows.UI.Xaml.Controls;

namespace FanKit.Frames.Transformers
{
    /// <summary>
    /// Page of <see cref="FanKit.Transformers.Transformer">.
    /// </summary>
    public sealed partial class Transformer2Page : Page
    {
        TransformerMode mode;
        Vector2 startingPoint;
        Transformer startingTransformer;
        Layer layer;

        class Layer
        {
            public CanvasBitmap Image;
            public TransformerMatrix TransformerMatrix;
        }
        
        //@Construct
        public Transformer2Page()
        {
            this.InitializeComponent();

            this.ResetButton.Tapped += (s, e) =>
            {
                Size size = new Size(this.CanvasControl.ActualWidth, this.CanvasControl.ActualHeight);

                this.CanvasTransformer.Position = new Vector2((float)size.Width / 2, (float)size.Height / 2);
                this.CanvasTransformer.Scale = 1;
                this.CanvasTransformer.Radian = 0;
                this.CanvasTransformer.ReloadMatrix();

                Transformer transformer = this.Reset(this.layer.Image.SizeInPixels.Width, this.layer.Image.SizeInPixels.Height, this.CanvasTransformer.Width, this.CanvasTransformer.Height);
                this.layer.TransformerMatrix.Destination = transformer;
                this.CanvasControl.Invalidate();//Invalidate
            };


            //Canvas
            this.CanvasControl.CreateResources += (sender, args) => args.TrackAsyncAction(this.CreateResourcesAsync(sender).AsAsyncAction());
            this.CanvasControl.Draw += (sender, args) =>
            {
                //CanvasTransformer
                Matrix3x2 matrix = this.CanvasTransformer.GetMatrix();
                Matrix3x2 canvasToVirtualMatrix = this.CanvasTransformer.GetMatrix(MatrixTransformerMode.CanvasToVirtual);

                //Transformer
                ICanvasImage source = this.layer.Image;
                Matrix3x2 transformMatrix = this.layer.TransformerMatrix.GetMatrix();
                Transformer transformer = this.layer.TransformerMatrix.Destination;

                //Draw
                args.DrawingSession.DrawCrad(new CompositeEffect
                {
                    Sources =
                    {
                        new ColorSourceEffect{ Color = Windows.UI.Colors.White },
                        new Transform2DEffect
                        {
                            Source = source,
                            TransformMatrix = transformMatrix * canvasToVirtualMatrix
                        }
                    }
                }, this.CanvasTransformer);
                args.DrawingSession.DrawBoundNodes(transformer, matrix);
            };


            //Single
            this.CanvasOperator.Single_Start += (point) =>
            {
                this.startingPoint = point;

                //Controller      
                this.layer.TransformerMatrix.CacheTransform();

                Transformer transformer = this.layer.TransformerMatrix.Destination;
                this.startingTransformer = transformer;

                Matrix3x2 matrix = this.CanvasTransformer.GetMatrix();
                this.mode = Transformer.ContainsNodeMode(point, transformer, matrix);

                this.CanvasControl.Invalidate();//Invalidate
            };
            this.CanvasOperator.Single_Delta += (point) =>
            {
                bool isRatio = false;
                bool isCenter = false;
                bool isStepFrequency = false;

                //Controller
                Matrix3x2 inverseMatrix = this.CanvasTransformer.GetInverseMatrix();
                Transformer transformer = Transformer.Controller(this.mode, startingPoint, point, this.startingTransformer, inverseMatrix, isRatio, isCenter, isStepFrequency);

                this.layer.TransformerMatrix.Destination = transformer;
                
                this.CanvasControl.Invalidate();//Invalidate
            };
            this.CanvasOperator.Single_Complete += (point) =>
            {
                this.CanvasControl.Invalidate();//Invalidate
            };

            //Right
            this.CanvasOperator.Right_Start += (point) =>
            {
                this.CanvasTransformer.CacheMove(point);
            };
            this.CanvasOperator.Right_Delta += (point) =>
            {
                this.CanvasTransformer.Move(point);
                this.CanvasControl.Invalidate();
            };
            this.CanvasOperator.Right_Complete += (point) =>
            {
                this.CanvasTransformer.Move(point);
                this.CanvasControl.Invalidate();
            };

            //Double
            this.CanvasOperator.Double_Start += (center, space) =>
            {
                this.CanvasTransformer.CachePinch(center, space);
                this.CanvasControl.Invalidate();
            };
            this.CanvasOperator.Double_Delta += (center, space) =>
            {
                this.CanvasTransformer.Pinch(center, space);
                this.CanvasControl.Invalidate();
            };
            this.CanvasOperator.Double_Complete += (center, space) =>
            {
                this.CanvasControl.Invalidate();
            };

            //Wheel
            this.CanvasOperator.Wheel_Changed += (point, space) =>
            {
                if (space > 0)
                    this.CanvasTransformer.ZoomIn(point);
                else
                    this.CanvasTransformer.ZoomOut(point);

                this.CanvasControl.Invalidate();
            };
        }

        private async Task CreateResourcesAsync(CanvasControl sender)
        {
            Size size = new Size(sender.ActualWidth, sender.ActualHeight);

            this.CanvasTransformer.Position = new Vector2((float)size.Width / 2, (float)size.Height / 2);
            this.CanvasTransformer.Scale = 1;
            this.CanvasTransformer.Radian = 0;
            this.CanvasTransformer.ReloadMatrix();
            
            //Bitmap
            CanvasBitmap bitmap = await CanvasBitmap.LoadAsync(sender, "Icon/Avatar.jpg");
            TransformerMatrix transformerMatrix = new TransformerMatrix
            {
                Source = new Transformer(bitmap.SizeInPixels.Width, bitmap.SizeInPixels.Height, Vector2.Zero),
                Destination = this.Reset(bitmap.SizeInPixels.Width, bitmap.SizeInPixels.Height, this.CanvasTransformer.Width, this.CanvasTransformer.Height),
            };
            
            //Layer
            this.layer = new Layer
            {
                TransformerMatrix = transformerMatrix,
                Image = bitmap,
            };
        }

        private Transformer Reset(float bitmapWidth, float bitmapHeight, float controlWidth, float controlHeight)
        {
            Vector2 center = new Vector2(controlWidth, controlHeight) / 2.0f;
            float scale = System.Math.Min(controlWidth / bitmapWidth, controlHeight / bitmapHeight);
            float width = scale * bitmapWidth / 3.0f / 2.0f;
            float height = scale * bitmapHeight / 3.0f / 2.0f;

            Transformer destination = new Transformer
            {
                LeftTop = center + new Vector2(-width, -height),
                RightTop = center + new Vector2(+width, -height),
                RightBottom = center + new Vector2(+width, +height),
                LeftBottom = center + new Vector2(-width, +height),
            };
            return destination;
        }

    }
}


```